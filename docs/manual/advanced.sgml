<sect>Advanced Topics
<p>
This portion of the manual will cover advanced topics, such as compiling and debugging the GNU Gatekeeper.

<sect1>Compiling GnuGk from Github
<label id="compile">
<p>
The following instructions are an example of how to compile GnuGk from source on an Ubuntu platform.
<p>
First make sure your system is up-to-date and install the tools needed for the compile
<verb>
sudo apt-get update
sudo apt-get install automake flex bison build-essential git pkg-config automake linuxdoc-tools libssl-dev
</verb>
Also make sure the "...-dev" packages for all databases or LDAP servers you want to use are installed.
<p>
Do NOT install PTlib or H323Plus packages from your Linux distribution.
<p>
<bf>NOTE</bf>: You can't use the latest PTLib from the OPAL project; it is undergoing
many changes that are incompatible with GnuGk. Use our patched version PTLib 2.10.9.

Get and compile PTLib from Github:
<verb>
cd ~
git clone https://github.com/willamowius/ptlib.git
cd ptlib
export PTLIBDIR=~/ptlib
./configure --enable-ipv6 --disable-odbc --disable-sdl --disable-lua --disable-expat
make optnoshared
</verb>

Get and compile H323Plus:
<verb>
cd ~
git clone https://github.com/willamowius/h323plus.git
cd h323plus
export OPENH323DIR=~/h323plus
./configure --enable-h235 --enable-h46017 --enable-h46026
make optnoshared
</verb>

Get and compile GnuGk:
<verb>
cd ~
git clone https://github.com/willamowius/gnugk.git
cd gnugk
./configure --enable-h46018 --enable-large-fdset
make optnoshared
</verb>

Once the compile is finished, the binary can be found as (on a 64bit Linux system)
<verb>~/gnugk/obj_linux_x86_64_s/gnugk</verb>

In order to stay up-to-date, run the following:

<verb>
cd ~/ptlib
git pull
make clean ; make optnoshared
cd ~/h323plus
git pull
make clean ; make optnoshared
cd ~/gnugk
git pull
make clean ; make optnoshared
</verb>

<sect1>Tracing GnuGk
<label id="tracing">
<p>
If GnuGk doesn't handle calls like you expect, you can enable tracing to see what GnuGk does internally.
This should not be confused with connection to the status port and looking at the events ("telnet 127.0.0.1 7000").
Creating a trace file will reveal a lot more of the internal workings.

On the command line, start GnuGk with -ttttt and -o to write the trace to a file:
<verb>
gnugk -c gnugk.ini -ttttt -o trace.log
</verb> 

If you have a lot of calls, trace.log can grow quite large, so make sure you disable it after you
are done with testing, or at least reduce the trace level to 2 or 3 for production.

You can also enable tracing in your config file:
<verb>
[Gatekeeper::Main]
TraceLevel=5

[LogFile]
Filename=trace.log
</verb> 

Or you can enable tracing through the status port:
<verb>
setlog trace.log
debug trc 5
</verb> 

Doing it through the status port has the advantage that you won't interrupt ongoing calls
and you can quickly turn it on or off.

The trace file will contain information detailing everything GnuGk does. To reduce it to a single call,
you can search for the callID or write a small Perl script to extract only those messages
you are interested in.

<sect1>Debugging GnuGk (on Linux)
<label id="debug">
<p>
In order to use gdb with GnuGk, the software and libraries must be compiled with debug support.

You may follow the instructions above in obtaining the software, but the compile in each subdirectory must be:
<verb>
make debugnoshared
</verb>

Allow unlimited core dumps:
<verb>
ulimit -c unlimited
</verb>

Run GnuGk:
<verb>
~/openh323/obj_linux_x86_64_d_s/gnugk -c your.ini
</verb>

Then wait for the crash and run GDB to get a stack backtrace:
<verb>
gdb obj_linux_x86_64_d_s/gnugk core
bt
</verb>

Once you've obtained a backtrace, post it to the mailing list.

Note: On some systems, the core dump is named "core.xxx" where xxx
is the process number of the GnuGk process that crashed.

On Linux, you can also let GnuGk dump it's current usage of file descriptors to the
trace file at runtime eg. if you are suspecting a leak by sending it a USR2 signal:
<verb>
killall gnugk -USR2
</verb>

