<sect>Accounting Configuration
<p>
The following sections in the config file can be used to configure accounting.

<sect1>Section &lsqb;Gatekeeper::Acct&rsqb;
<label id="gkacct">
<p>
This section defines a list of modules which may be used to perform
accounting.  The accounting function can be used for logging gatekeeper
on/off events and call start/stop/update events.  Each accounting module
logs received events to module-specific storage.  The various storage
options include plain text file, RADIUS server and many more.  The
configuration is very similar to the one for gatekeeper authentication (see
<ref id="gkauth" name="[Gatekeeper::Auth]">).

All CDRs are also sent to the status port and can be used by external applications.

<descrip>
<tag/Syntax:/
<tscreen><verb>
acctmod=actions

 <acctmod> := FileAcct | RadAcct | SQLAcct | HttpAcct | AMQPAcct | MQTTAcct | StatusAcct | SyslogAcct | LuaAcct | RequireOneNet | CapacityControl | ...
 <actions> := <control>[;<event>,<event>,...]
 <control> := optional | required | sufficient | alternative
 <event>   := start | stop | alert | connect | update | register | unregister | on | off | reject | mediafail
</verb></tscreen>
</descrip>
The event list tells the gatekeeper which events should trigger logging
with the given accounting module (if an event type is supported by the module):
<itemize>
<item><tt/start/ - a call has been started and a Setup message has been received (only available in routed mode)
<item><tt/alert/ - a call is alerting (only available in routed mode)
<item><tt/connect/ - a call has been connected (only available in routed mode)
<item><tt/update/ - a call is active and a periodic update is performed
	to reflect the new call duration. The frequency of these updates is determined
	by the <bf/AcctUpdateInterval/ variable from the <ref id="calltable" name="[CallTable]">
	section
<item><tt/register/ - an endpoint has registered
<item><tt/unregister/ - an endpoint has unregistered
<item><tt/stop/ - a call has been disconnected (removed from the gatekeeper call table)
<item><tt/reject/ - a call has been rejected (ARJ) before becoming a true call in GnuGk's terms
<item><tt/mediafail/ - port detection in a channel of this has failed
<item><tt/on/ - the gatekeeper has been started
<item><tt/off/ - the gatekeeper has been shut down
</itemize>
An event logged by a module may results in one of three result codes:
<bf/ok/, <bf/fail/, <bf/next/.
<itemize>
<item><tt/ok/ - the event has been logged successfully by this module
<item><tt/fail/ - the module failed to log the event
<item><tt/next/ - the event has not been logged by this module, because the module
  is not configured for/does not support this event type
</itemize>
Accounting modules can be stacked to log events by multiple modules or to create
failover setups. The <bf/control/ flag for each module, along with result codes,
define what is the final status of the event processing by the entire module stack.
If the final result is <bf/failure/, some special actions may take place. Currently,
if a call <bf/start/ event logging fails, the call is disconnected immediately.
The following <bf/control/ flags are recognized:
<itemize>
<item><tt/required/ - if the module fails to log an event, the final status
                      is set to failure and the event is passed down to any remaining
					  modules.
<item><tt/optional/ - the module tries to log an event, but the final status
                      is not affected by success or failure (except when the module
					  is last on the list). The event is always passed down
					  to any remaining modules.
<item><tt/sufficient/ - the module determines the final status. If an event
                        is logged successfully, no remaining modules are processed.
						Otherwise the final status is set to failure and the event
						is passed down to any remaining modules.
<item><tt/alternative/ - if the module logs an event successfully, no remaining
                         modules are processed. Otherwise the final status is
						 not modified and the event is passed down to any remaining
						 modules.
</itemize>

Currently supported accounting modules:
<itemize>
<item><tt>FileAcct</tt>
<p>
A plain Call Detail Report ("CDR") text file logger. It outputs CDR status data to
a specified text file. This module only supports the <bf/stop/ accounting event.
Configuration settings are read from <ref id="fileacct" name="[FileAcct]"> section.

<item><tt>RadAcct</tt>
<p>
This module performs RADIUS accounting. It supports the event types
start, stop, update, on, off.
See section <ref id="radacct" name="[RadAcct]"> for configuration details.

<item><tt>SQLAcct</tt>
<p>
This module performs direct SQL accounting. It supports (start, connect, stop, update, alert, register, unregister)
event types. 
See section <ref id="sqlacct" name="[SQLAcct]"> for configuration details.

<item><tt>HttpAcct</tt>
<p>
This module logs all accounting events over HTTP. It supports (start, connect, stop, update, alert, reject, register, unregister, on, off)
See section <ref id="httpacct" name="[HttpAcct]"> for configuration details.

<item><tt>AMQPAcct</tt>
<p>
This module logs all accounting events to an AMQP queue, eg. RabbitMQ. It supports (start, connect, stop, update, alert, reject, register, unregister, on, off)
See section <ref id="amqpacct" name="[AMQPAcct]"> for configuration details.

<item><tt>MQTTAcct</tt>
<p>
This module logs all accounting events to an MQTT server. It supports (start, connect, stop, update, alert, reject, register, unregister, on, off)
See section <ref id="mqttacct" name="[MQTTAcct]"> for configuration details.

<item><tt>StatusAcct</tt>
<p>
This module logs all accounting events on the status port. It can be used to interface to external application in real-time. It supports (start, connect, stop, update, alert, register, unregister)
event types.
See section <ref id="statusacct" name="[StatusAcct]"> for configuration details.

<item><tt>SyslogAcct</tt>
<p>
This module logs all accounting events to the Unix syslog. It supports (start, connect, stop, update)
event types. 
See section <ref id="syslogacct" name="[SyslogAcct]"> for configuration details.

<item><tt>LuaAcct</tt>
<p>
This module runs a LUA script for each accounting event. It supports (start, connect, stop, update, alert, register, unregister) event types.
See section <ref id="luaacct" name="[LuaAcct]"> for configuration details.

<item><tt>RequireOneNet</tt>
<p>
Logically an authentication method that ensures all calls either start or terminate within one of your own networks.
See section <ref id="requireonenet" name="[RequireOneNet]"> for configuration details.

<item><tt>CapacityControl</tt>
<p>
This module performs inbound call volume logging, required for the <tt/CapacityControl/
authentication module to work correctly. See the section <ref id="capctrl" name="[CapacityControl]">
for details.
 
<item><tt>default</tt>
<p>
This is a special pseudo module - it is used to set the final status
if other modules have not determined it. The format is:
<descrip>
<tag/Syntax:/
<tscreen><verb>
 default=<status>[;<event>,<event>,...]
 <status> := accept | fail
 <event>  := start | stop | alert | connect | update | register | unregister | on | off
</verb></tscreen>
</descrip>

</itemize>

Sample configuration #1 (try to log call start/stop with RADIUS server,
and always write a CDR to a text file):
<descrip>
<tag/Example:/
<tt/RadAcct=optional;start,stop/<newline>
<tt/FileAcct=required/<newline>
</descrip>

Sample configuration #2 (try to log call start/stop with RADIUS server,
if it fails use a CDR log file):
<descrip>
<tag/Example:/
<tt/RadAcct=alternative;start,stop/<newline>
<tt/FileAcct=sufficient;stop/<newline>
<tt/default=accept/<newline>
</descrip>
The <bf/default/ rule is required here to prevent calls from being rejected
because of RadAcct start event logging failure. If RadAcct responds with a <bf/fail/
return code, it is passed down to the FileAcct module. The FileAcct module does not
support <bf/start/ events, so it returns a <bf/next/ code. If there were
no <bf/default/ rule, the final status would be failure, because no module
has been able to log the event.

Sample configuration #3 (always log call start and stop events with RADIUS
server, if it fails for call stop event, use a CDR file to store call info):
<descrip>
<tag/Example:/
<tt/RadAcct=alternative;start,stop/<newline>
<tt/FileAcct=sufficient;stop/<newline>
<tt/default=fail;start/<newline>
</descrip>
The <bf/default/ rule is optional here. If RadAcct returns a <bf/fail/
code for the <bf/start/ event, the code is passed to the FileAcct module.
The FileAcct module does not support <bf/start/ events, so it returns <bf/next/
return code. The <bf/default/ rule ensures that the call is disconnected
if the call start event could not be logged with RadAcct. However, we still want
to store a CDR in a text file in case the RADIUS server is down when the call
disconnects, so we can fetch call duration into a billing system later.

<sect1>Customizing CDR strings and accounting data
<label id="cdrparameters">
<p>
Most accounting modules let you customize the CDR data they store. They use a common set of
parameters to define the CDR string.

Parameters are specified using <tt/%/ character and can be one letter
(like <tt/%n/) or longer (like <tt/%{CallId}/). Any remaining characters that
are not parameter names are simply copied to the final CDR string. The following
parameters are recognized in all call related accounting events:
<itemize>
<item><tt/%g/ - gatekeeper name
<item><tt/%n/ - call number (not unique after gatekeeper restart)
<item><tt/%d/ - call duration (seconds)
<item><tt/%t/ - total call duration (from Setup to Release Complete)
<item><tt/%c/ - Q.931 disconnect cause (decimal integer) as originally received
<item><tt/%{cause-translated}/ - Q.931 disconnect cause (decimal integer) after translation rules
<item><tt/%r/ - who disconnected the call (-1 - unknown, 0 - the gatekeeper, 1 - the caller, 2 - the callee)
<item><tt/%p/ - PDD (Post Dial Delay) in seconds
<item><tt/%s/ - unique (for this gatekeeper) session identifier (Acct-Session-Id)
<item><tt/%u/ - H.323 ID of the calling party
<item><tt/%{event-uuid}/ - UUID of this event
<item><tt/%{event-time}/ - time when the event is generated
<item><tt/%{gkip}/ - IP address of the gatekeeper
<item><tt/%{external-ip}/ - external IP address of the gatekeeper, if set
<item><tt/%{CallId}/ - H.323 call identifier (16 hex 8-bit digits)
<item><tt/%{ConfId}/ - H.323 conference identifier (16 hex 8-bit digits)
<item><tt/%{CallLink}/ - Linked H.323 conference identifier (billing account for H.450 call transfer)
<item><tt/%{setup-time}/ - timestamp string for Q.931 Setup message
<item><tt/%{alerting-time}/ - timestamp string for Q.931 Alerting message
<item><tt/%{connect-time}/ - timestamp string for a call connected event
<item><tt/%{disconnect-time}/ - timestamp string for a call disconnect event
<item><tt/%{ring-time}/ - time a remote phone was ringing for (from Alerting till Connect or Release Complete)
<item><tt/%{caller-ip}/ - signaling IP address of the caller (only available in routed mode)
<item><tt/%{caller-port}/ - signaling port of the caller (only available in routed mode)
<item><tt/%{callee-ip}/ - signaling IP address of the called party (only available in routed mode)
<item><tt/%{callee-port}/ - signaling port of the called party (only available in routed mode)
<item><tt/%{src-info}/ - a colon separated list of source aliases
<item><tt/%{dest-info}/ - a colon separated list of destination aliases
<item><tt/%{Calling-Station-Id}/ - calling party number
<item><tt/%{Called-Station-Id}/ - called party number (rewritten)
<item><tt/%{Dialed-Number}/ - dialed number (as received from the calling party)
<item><tt/%{caller-epid}/ - endpoint identifier of the calling party
<item><tt/%{callee-epid}/ - endpoint identifier of the called party
<item><tt/%{call-attempts}/ - number of attempts to establish the calls (with failover this can be > 1)
<item><tt/%{last-cdr}/ - is this the last CDR for this call ? (0 / 1) only when using failover this can be 0
<item><tt/%{client-auth-id}/ - a 64 bit integer ID provided to GnuGk when authenticating the call (through SQLAuth)
<item><tt/%{caller-vendor}/ - vendor and version info of the calling endpoint
<item><tt/%{callee-vendor}/ - vendor and version info of the called endpoint
<item><tt/%{sinfo-ip}/ - IP from Sorenson SInfo (only available when TranslateSorensonSourceInfo=1)
<item><tt/%{bandwidth}/ - bandwidth for this call
<item><tt/%{bandwidth-kbps}/ - bandwidth granted to this call (in kbps)
<item><tt/%{caller-audio-codec}/ - audio codec used by the caller for sending
<item><tt/%{callee-audio-codec}/ - audio codec used by the called for sending
<item><tt/%{caller-video-codec}/ - video codec used by the caller for sending
<item><tt/%{callee-video-codec}/ - video codec used by the called for sending
<item><tt/%{caller-audio-bitrate}/ - audio bitrate used by the caller for sending (in kbps)
<item><tt/%{callee-audio-bitrate}/ - audio bitrate used by the called for sending (in kbps)
<item><tt/%{caller-video-bitrate}/ - video bitrate used by the caller for sending (in kbps)
<item><tt/%{callee-video-bitrate}/ - video bitrate used by the called for sending (in kbps)
<item><tt/%{caller-media-ip}/ - media IP (audio) used by the caller
<item><tt/%{callee-media-ip}/ - media IP (audio) used by the called
<item><tt/%{encryption}/ - "On" if all audio and video chanels are encrypted, otherwise "Off"
<item><tt/%{env1}/ - content of environment variable GNUGK_ENV1
<item><tt/.../
<item><tt/%{env9}/ - content of environment variable GNUGK_ENV9
<item><tt/%{media-oip}/ - caller's RTP media IP (only for H.245 routed/tunneled calls) DEPRECATED
<item><tt/%{codec}/ - audio codec used during the call (only for H.245 routed/tunneled calls) DEPRECATED
<item><tt/%{registrations}/ - number of endpoints currently registered
<item><tt/%{calls}/ - number of ongoing calls
<item><tt/%{total-calls}/ - total number of calls
<item><tt/%{successful-calls}/ - total number of successful calls
<item><tt/%{allocated-bandwidth}/ - currently allocated-bandwidth for all calls together
</itemize>

For Register and Unregister events you can use the following parameters:
<itemize>
<item><tt/%g/ - gatekeeper name
<item><tt/%{gkip}/ - IP address of the gatekeeper
<item><tt/%{external-ip}/ - external IP address of the gatekeeper, if set
<item><tt/%u/ - H.323 ID of the registering party
<item><tt/%{event-uuid}/ - UUID of this event
<item><tt/%{event-time}/ - time when the event is generated
<item><tt/%{endpoint-ip}/ - IP number of the endpoint
<item><tt/%{endpoint-port}/ - port number of the endpoint
<item><tt/%{endpoint-vendor}/ - vendor and version info of the endpoint
<item><tt/%{epid}/ - the endpoint ID
<item><tt/%{aliases}/ - the comma separated list of aliases the endpoint has registered with
<item><tt/%{Calling-Station-Id}/ - the caaling party number of this endpoint
<item><tt/%{env1}/ - content of environment variable GNUGK_ENV1
<item><tt/.../
<item><tt/%{env9}/ - content of environment variable GNUGK_ENV9
<item><tt/%{registrations}/ - number of endpoints currently registered
<item><tt/%{calls}/ - number of ongoing calls
<item><tt/%{total-calls}/ - total number of calls
<item><tt/%{successful-calls}/ - total number of successful calls
<item><tt/%{allocated-bandwidth}/ - currently allocated-bandwidth for all calls together
</itemize>

For On and Off events you can use the following parameters:
<itemize>
<item><tt/%g/ - gatekeeper name
<item><tt/%{gkip}/ - IP address of the gatekeeper
<item><tt/%{external-ip}/ - external IP address of the gatekeeper, if set
<item><tt/%{env1}/ - content of environment variable GNUGK_ENV1
<item><tt/.../
<item><tt/%{env9}/ - content of environment variable GNUGK_ENV9
</itemize>

<sect1>Section &lsqb;FileAcct&rsqb;
<label id="fileacct">
<p>
This accounting module writes CDR lines to a specified text file. The CDR
format can be a standard one (the same as displayed by the status interface)
or a customized one (using parametrized query string).

<itemize>
<item>
<tt/DetailFile=FULL_PATH_AND_FILENAME/<newline>
Default: <tt>N/A</tt><newline>
<p>
A full path to the CDR plain text file. If a file with the given name already 
exists, new CDRs will be appended at the end of the file.

<item>
<tt/StandardCDRFormat=0/<newline>
Default: <tt/1/<newline>
<p>
Use a CDR format compatible with the status interface CDR format (<tt/1/)
or build a custom CDR string from the <bf/CDRString/ parametrized string.
<p>
The StandardCDRFormat is equivalent to this definition:
<descrip>
<tt/TimestampFormat=RFC822/<newline>
<tt>CDRString=CDR|%n|%{CallId}|%d|%{connect-time}|%{disconnect-time}|%{caller-ip}:%{caller-port}|%{caller-epid}|%{callee-ip}:%{callee-port}|%{callee-epid}|%{dest-info}|%{src-info}|%g;</tt><newline>
</descrip>

<item>
<tt/CDRString=%s|%g|%u|%{Calling-Station-Id}|%{Called-Station-Id}|%d|%c/<newline>
Default: <tt>N/A</tt><newline>
<p>
If <bf/StandardCDRFormat/ is disabled (0) or not specified at all, 
this parametrized string instructs the gatekeeper on how to build a custom
CDR.
You can use the <ref id="cdrparameters" name="common CDR parameters"> to define
what to include into your CDRs.

<item><tt/TimestampFormat=Cisco/<newline>
Default: <tt>N/A</tt><newline>
<p>
Format of timestamp strings printed in CDR strings. If this setting
is not specified, the global one from the main gatekeeper section is used.

<item>
<tt/Rotate=hourly | daily | weekly | monthly | L... | S.../<newline>
Default: <tt>N/A</tt><newline>
<p>
If set, the CDR file will be rotated based on this setting. Hourly rotation
enables rotation once per hour, daily - once per day, weekly - once per week
and monthly - once per month. An exact rotation moment is determined by a combination
of RotateDay and RotateTime. During rotation, an existing file is renamed 
to CURRENT_FILENAME.YYYYMMDD-HHMMSS, where YYYYMMDD-HHMMSS is replaced with 
the current timestamp, and new CDRs are logged to an empty file.<newline>
In addition, rotation per number of CDRs written (L...) and per file size (S...)
is supported. The <tt/L/ prefix specifies a number of CDR lines written,
the <tt/S/ prefix specifies CDR file size. <tt/k/ and <tt/m/ suffixes can
be used to specify thousands (kilobytes) and millions (megabytes). 

<descrip>
<tag/Example 1 - no rotation:/
<tt/&lsqb;FileAcct&rsqb;/<newline>
<tt>DetailFile=/var/log/gk/cdr.log</tt><newline>
</descrip>

<descrip>
<tag/Example 2 - rotate every hour (00:45, 01:45, ..., 23:45):/
<tt/&lsqb;FileAcct&rsqb;/<newline>
<tt>DetailFile=/var/log/gk/cdr.log</tt><newline>
<tt>Rotate=hourly</tt><newline>
<tt>RotateTime=45</tt><newline>
</descrip>

<descrip>
<tag/Example 3 - rotate every day at 23:00 (11PM):/
<tt/&lsqb;FileAcct&rsqb;/<newline>
<tt>DetailFile=/var/log/gk/cdr.log</tt><newline>
<tt>Rotate=daily</tt><newline>
<tt>RotateTime=23:00</tt><newline>
</descrip>

<descrip>
<tag/Example 4 - rotate every Sunday at 00:59:/
<tt/&lsqb;FileAcct&rsqb;/<newline>
<tt>DetailFile=/var/log/gk/cdr.log</tt><newline>
<tt>Rotate=weekly</tt><newline>
<tt>RotateDay=Sun</tt><newline>
<tt>RotateTime=00:59</tt><newline>
</descrip>

<descrip>
<tag/Example 5 - rotate on the last day of each month:/
<tt/&lsqb;FileAcct&rsqb;/<newline>
<tt>DetailFile=/var/log/gk/cdr.log</tt><newline>
<tt>Rotate=monthly</tt><newline>
<tt>RotateDay=31</tt><newline>
<tt>RotateTime=23:00</tt><newline>
</descrip>

<descrip>
<tag/Example 6 - rotate per every 10000 CDRs:/
<tt/&lsqb;FileAcct&rsqb;/<newline>
<tt>DetailFile=/var/log/gk/cdr.log</tt><newline>
<tt>Rotate=L10000</tt><newline>
</descrip>

<descrip>
<tag/Example 7 - rotate per every 10 kilobytes:/
<tt/&lsqb;FileAcct&rsqb;/<newline>
<tt>DetailFile=/var/log/gk/cdr.log</tt><newline>
<tt>Rotate=S10k</tt><newline>
</descrip>

</itemize>

<sect1>Section &lsqb;RadAcct&rsqb;
<label id="radacct">
<p>
This accounting module sends accounting data to a RADIUS server. Module
configuration is almost the same as for RADIUS authenticators (see
<ref id="radauth" name="[RadAuth]"> and <ref id="radaliasauth" name="[RadAliasAuth]">
for more details on the parameters).

<itemize>
<item><tt/Servers=SERVER1[:AUTH_PORT:ACCT_PORT[:SECRET]];SERVER2[:AUTH_PORT:ACCT_PORT[:SECRET]];.../<newline>
Default: <tt>N/A</tt><newline>
<p>
RADIUS servers to send accounting data to. If no port information is given,
a port number from <tt/DefaultAcctPort/ is be used. If no secret is set, 
the default shared secret from <tt/SharedSecret/ is used. Server names may be
specified by IP address or DNS name. IPv6 addresses must always be written in brackets.

<descrip>
<tag>Sample <tt/Servers/ lines:</tag>
<tt>Servers=192.168.1.1</tt><newline>
<tt>Servers=192.168.1.1:1645:1646</tt><newline>
<tt>Servers=192.168.1.1:1645:1646:secret1</tt><newline>
<tt>Servers=radius1.mycompany.com:1812:1813</tt><newline>
<tt>Servers=radius1.mycompany.com;radius2.mycompany.com</tt><newline>
<tt>Servers=radius1.mycompany.com:1812:1813:secret1;radius2.mycompany.com:1812:1813:secret2</tt><newline>
<tt>Servers=[2501:4f3:61:2143::2]</tt><newline>
<tt>Servers=[2501:4f3:61:2143::2]:1645</tt><newline>
<tt>Servers=[2501:4f3:61:2143::2]:1645:1646</tt><newline>
<tt>Servers=[2501:4f3:61:2143::2]:1645:1646:secret1</tt><newline>
<tt>Servers=[2501:4f3:61:2143::2]:1645:1646:secret1;[2501:4f3:61:2143::3]:1645:1646:secret2</tt><newline>
</descrip>

<item><tt/LocalInterface=IP_OR_FQDN/<newline>
Default: <tt>N/A</tt><newline>
<p>
Specific local network interface that <htmlurl url="https://www.gnugk.org/" name="GnuGk"> should
use in order to communicate with RADIUS servers.

<item><tt/RadiusPortRange=10000-11000/<newline>
Default: <tt>N/A</tt><newline>
<p>
By default (if this option is not set) GnuGk 
allocates ports dynamically as specified by the operating system.
In order to restrict the ports which GnuGk will use then configure this parameter appropriately.

<item><tt/DefaultAcctPort=PORT_NO/<newline>
Default: <tt>1813</tt><newline>
<p>
Default port number to be used for RADIUS accounting requests.
May be overridden by the <tt/Servers/ attribute.

<item><tt/SharedSecret=SECRET/<newline>
Default: <tt>N/A (empty string)</tt><newline>
<p>
A secret used to authenticate this GnuGk (NAS client) to a RADIUS
server. It should be a cryptographically strong password. This is the default
value used if no server-specific secret is set in the <tt/Servers/.
If <tt/EncryptAllPasswords/ is enabled, or a <tt/KeyFilled/ variable is defined
in this section, the password is in encrypted form and should be created using
the <tt/addpasswd/ utility.

<item><tt/RequestTimeout=TIMEOUT_MS/<newline>
Default: <tt/2000/ (milliseconds)<newline>
<p>
Timeout (milliseconds) for a RADIUS server response to a request
sent by GnuGk. If no response is received within this time period,
then the next RADIUS server is queried.

<item><tt/IdCacheTimeout=TIMEOUT_MS/<newline>
Default: <tt/9000/ (milliseconds)<newline>
<p>
Timeout (milliseconds) for RADIUS request 8-bit identifiers to be
unique.

<item><tt/SocketDeleteTimeout=TIMEOUT_MS/<newline>
Default: <tt/60000/ (milliseconds) - 60 s<newline>
<p>
Timeout for unused RADIUS sockets to be closed.

<item><tt/RequestRetransmissions=NUMBER/<newline>
Default: <tt/2/<newline>
<p>
How many times a single RADIUS request is transmitted to every
configured RADIUS server (if no response is received).

<item><tt/RoundRobinServers=BOOLEAN/<newline>
Default: <tt/1/<newline>
<p>
RADIUS requests retransmission method.
<p>
If set to 1, RADIUS request
is transmitted in the following way (until response is received):
<tscreen><verb>
Server #1 Attempt #1, Server #2 Attempt #1, ..., Server #N Attempt #1
...
Server #1 Attempt #RequestRetransmissions, ..., Server #1 Attempt #RequestRetransmissions
</verb></tscreen>
<p>
If set to 0, the following sequence is preserved:
<tscreen><verb>
Server #1 Attempt #1, ..., Server #1 Attempt #RequestRetransmissions
...
Server #N Attempt #1, ..., Server #N Attempt #RequestRetransmissions
</verb></tscreen>

<item><tt/AppendCiscoAttributes=BOOLEAN/<newline>
Default: <tt/0/<newline>
<p>
If set, Cisco Vendor Specific RADIUS attributes are included
in RADIUS requests (h323-conf-id,h323-call-origin,h323-call-type).

<item><tt/TimestampFormat=ISO8601/<newline>
Default: <tt>N/A</tt><newline>
<p>
Format of timestamp strings sent in RADIUS attributes. If this setting
is not specified, the global one from the main gatekeeper section is applied.

<item><tt/UseDialedNumber=BOOLEAN/<newline>
Default: <tt/0/<newline>
<p>
Select Called-Station-Id number type between the original one (as dialed
by the user) - <tt/UseDialedNumber=1/ - and the rewritten one - <tt/UseDialedNumber=0/.

</itemize>


<sect2>&lsqb;RadAcct&rsqb; Accounting-Request RADIUS Attributes
<p>
For an Accounting-Request, the following RADIUS attributes are included
within Accounting-Request packets. Each attribute 
is followed by a list of accounting event types.
<p>
<itemize>
<item><tt>Acct-Status-Type (start,update,stop,on,off)</tt><newline>
<p>
		The accounting event type (Start, Interim-Update, Stop, 
		Accounting-On, Accounting-Off).
		
<item><tt>NAS-IP-Address (start,update,stop,on,off)</tt><newline>
<p>
		An IP address of the gatekeeper.
		
<item><tt>NAS-Identifier (start,update,stop,on,off)</tt><newline>
<p>
		The gatekeeper identifier (Name= gk parameter).
		
<item><tt>NAS-Port-Type (start,update,stop,on,off)</tt><newline>
<p>
		Fixed value Virtual.
		
<item><tt>Service-Type (start,update,stop)</tt><newline>
<p>
		Fixed value Login-User.
		
<item><tt>Acct-Session-Id (start,update,stop)</tt><newline>
<p>
		A unique accounting session identifier string.
		
<item><tt>User-Name (start,update,stop)</tt><newline>
<p>
		Calling party's account name.

<item><tt>Framed-IP-Address (start,update,stop)</tt><newline>
<p>
		An IP address for the calling party. Either an endpoint call signaling
		address or a remote socket address for the signaling channel.

<item><tt>Acct-Session-Time (update,stop)</tt><newline>
<p>
		Call duration (seconds) - for interim-update events this is the actual
		duration.
		
<item><tt>Calling-Station-Id (start,update,stop)</tt><newline>
<p>
		Calling party's number.
		
<item><tt>Called-Station-Id (start,update,stop)</tt><newline>
<p>
		Called party's number.

<item><tt>(optional) VSA: VendorId=Cisco, h323-gw-id (start,update,stop)</tt><newline>
<p>
		The same as NAS-Identifier.
		
<item><tt>(optional) VSA: VendorId=Cisco, h323-conf-id (start,update,stop)</tt><newline>
<p>
		H.323 Conference ID for the call.
		
<item><tt>(optional) VSA: VendorId=Cisco, h323-call-origin (start,update,stop)</tt><newline>
<p>
		Fixed string "proxy".
		
<item><tt>(optional) VSA: VendorId=Cisco, h323-call-type (start,update,stop)</tt><newline>
<p>
		Fixed string "VoIP".
		
<item><tt>(optional) VSA: VendorId=Cisco, h323-setup-time (start,update,stop)</tt><newline>
<p>
		Timestamp when the Q.931 Setup message has been received by the gk.
		
<item><tt>(optional) VSA: VendorId=Cisco, h323-connect-time (update,stop)</tt><newline>
<p>
		Timestamp when the call has been connected (Q.931 Setup message 
		has been received or ACF has been sent in direct signaling mode).
	
<item><tt>(optional) VSA: VendorId=Cisco, h323-disconnect-time (stop)</tt><newline>
<p>
		Timestamp when the call has been disconnected (ReleaseComplete or DRQ
		has been received).
		
<item><tt>(optional) VSA: VendorId=Cisco, h323-disconnect-cause (stop)</tt><newline>
<p>
		Q.931 two digit hexadecimal disconnect cause.
		
<item><tt>(optional) VSA: VendorId=Cisco, h323-remote-address (start,update,stop)</tt><newline>
<p>
		An IP address of the called party (if known).

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, h323-ivr-out (start, update, stop)</tt><newline>
<p>
		h323-call-id variable that contains an H.323 Call Identifier.
		The syntax is: "h323-ivr-out=h323-call-id:123FDE 12348765 9abc1234 12".

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, h323-ivr-out (start, update, stop)</tt><newline>
<p>
		rewritten-e164-num contains the rewritten called party's number
		(independent of the setting of the UseDialedNumber switch).

<item><tt>Acct-Delay-Time (start,update,stop)</tt><newline>
<p>
		Amount of time (seconds) the gatekeeper is trying to send the request.
		Currently always 0.

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, h323_rtp_proxy (stop)</tt><newline>
<p>
		Proxy mode of call (0=off, 1=on)

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, RTP_source_IP (stop)</tt><newline>
<p>
		RTCP source report data

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, RTP_destination_IP (stop)</tt><newline>
<p>
		RTCP source report data

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, RTCP_source_packet_count (stop)</tt><newline>
<p>
		RTCP source report data

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, RTCP_source_packet_lost (stop)</tt><newline>
<p>
		RTCP source report data

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, RTCP_source_jitter (stop)</tt><newline>
<p>
		RTCP source report data

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, RTCP_source_sdes_XXX (stop)</tt><newline>
<p>
		RTCP source report data (for each source description (sdes))

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, RTCP_destination_packet_count (stop)</tt><newline>
<p>
		RTCP destination report data

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, RTCP_destination_packet_lost (stop)</tt><newline>
<p>
		RTCP destination report data

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, RTCP_destination_jitter (stop)</tt><newline>
<p>
		RTCP destination report data

<item><tt>(optional) VSA: VendorId=Cisco, Cisco-AVPair, RTCP_destination_sdes_XXX (stop)</tt><newline>
<p>
		RTCP destination report data (for each source description (sdes))

</itemize>

<sect2>&lsqb;RadAcct&rsqb; Accounting-Response Radius Attributes
<p>
The gatekeeper ignores all attributes present in Accounting-Response
Radius packets.
<p>

<sect1>Section &lsqb;SQLAcct&rsqb;
<label id="sqlacct">
<p>
This accounting module stores accounting information directly
to a SQL database. Many configuration settings are common with
other SQL modules.

Use the <ref id="database" name="common database configuration options">
to define your database connection for this module.

<itemize>
<item><tt/StartQuery=INSERT .../<newline>
Default: <tt>N/A</tt><newline>
<p>
Defines SQL query used to insert a new call record to the database. The query
is parametrized - that means parameter replacement is made before each query
is executed.
You can use the <ref id="cdrparameters" name="common CDR parameters"> to define
what to include into your CDRs.
<p>
Sample query string:
<tscreen><verb>
INSERT INTO call (gkname, sessid, username, calling, called) 
	VALUES ('%g', '%s', '%u', '%{Calling-Station-Id}', '%{Called-Station-Id}')
</verb></tscreen>

<item><tt/StartQueryAlt=INSERT .../<newline>
Default: <tt>N/A</tt><newline>
<p>
Defines a SQL query used to insert a new call record to the database in case
the <tt/StartQuery/ failed for some reason (the call already exists, for example).
The syntax and parameters are the same as for <tt/StartQuery/.

<item><tt/UpdateQuery=UPDATE .../<newline>
Default: <tt>N/A</tt><newline>
<p>
Defines a SQL query used to update a call record in the database with the current 
call state. It is used for connect and update accounting events.
The syntax and parameters are the same as for <tt/StartQuery/.
<p>
Sample query string:
<tscreen><verb>
UPDATE call SET duration = %d WHERE gkname = '%g' AND sessid = '%s'
</verb></tscreen>

<item><tt/StopQuery=UPDATE .../<newline>
Default: <tt>N/A</tt><newline>
<p>
Defines SQL query used to update a call record in the database when the call
is finished (disconnected). The syntax and parameters are the same 
as for <tt/StartQuery/.
<p>
Sample query string:
<tscreen><verb>
UPDATE call SET duration = %d, dtime = '%{disconnect-time}' WHERE gkname = '%g' AND sessid = '%s'
</verb></tscreen>

<item><tt/StopQueryAlt=INSERT .../<newline>
Default: <tt>N/A</tt><newline>
<p>
Defines a SQL query used to update call record in the database when the call
is finished (disconnected) in case the regular <tt/StopQuery/ failed (because
the call record does not yet exist, for example). The syntax and parameters 
are the same as for <tt/StartQuery/.
<p>
Sample query string:
<tscreen><verb>
INSERT INTO call (gkname, sessid, username, calling, called, duration) 
	VALUES ('%g', '%s', '%u', '%{Calling-Station-Id}', '%{Called-Station-Id}', %d)
</verb></tscreen>

<item><tt/AlertQuery=UPDATE .../<newline>
Default: <tt>N/A</tt><newline>
<p>
Defines SQL query used to update a call record in the database when the call is alerting.

<item><tt/RegisterQuery=INSERT .../<newline>
Default: <tt>N/A</tt><newline>
<p>
Defines SQL query used to update the database when an endpoint registers.

<item><tt/UnregisterQuery=DELETE .../<newline>
Default: <tt>N/A</tt><newline>
<p>
Defines SQL query used to update the database when an endpoint unregisters.

<item><tt/OnQuery=UPDATE .../<newline>
Default: <tt>N/A</tt><newline>
<p>
Defines SQL query used to update a record in the database when the gatekeeper is starting.

<item><tt/OffQuery=UPDATE .../<newline>
Default: <tt>N/A</tt><newline>
<p>
Defines SQL query used to update a record in the database when the gatekeeper is stopping.

<item><tt/TimestampFormat=MySQL/<newline>
Default: <tt>N/A</tt><newline>
<p>
Format of timestamp strings used in queries. If this setting
is not specified, the global one from the main gatekeeper section is used.

<item><tt/MinPoolSize=5/<newline>
Default: <tt>1</tt><newline>
<p>
Number of concurrent SQL connections in the pool. The first available connection
in the pool is used to store accounting data.

</itemize>

<sect2>A Sample MySQL Schema
<label id="mysqlscheme">
<p>
The SQLAcct module is designed to adapt to whatever database structure you already have. You can define all queries so they fit your existing tables.
Here is an example of what those tables might look like in MySQL and which you can use as a starting point.
<p>
Create a new database; here we use the name 'GNUGK':

<tscreen><verb>
create database GNUGK;
</verb></tscreen>

Then create a table in this database to store you accounting data; we call the table 'CDR'.

<tscreen><verb>
create table GNUGK.CDR (
        gatekeeper_name varchar(255),
        call_number int zerofill,
        call_duration mediumint unsigned zerofill,
                index duration_idx (call_duration),
        disconnect_cause smallint unsigned zerofill,
                index dcc_idx (disconnect_cause),
        acct_session_id varchar(255),
        h323_id varchar(255),
        gkip varchar(15),
        CallId varchar(255),
        ConfID varchar(255),
        setup_time datetime,
        connect_time datetime,
        disconnect_time datetime,
        caller_ip varchar(15),
                index srcip_idx (caller_ip),
        caller_port smallint unsigned zerofill,
        callee_ip varchar(15),
                index destip_idx (callee_ip),
        callee_port smallint unsigned zerofill,
        src_info varchar(255),
        dest_info varchar(255),
        Calling_Station_Id varchar(255),
        Called_Station_Id varchar(255),
                index dialednumber_idx (Called_Station_Id (20)),
        Dialed_Number varchar(255)
);
</verb></tscreen>

Then you need to create a username for accessing the data.

<tscreen><verb>
mysql> GRANT delete,insert,select,update ON GNUGK.* TO 'YourDesiredUsername'@'localhost' IDENTIFIED BY 'APassword';
mysql> flush privileges;
</verb></tscreen>

With this command you will permit access to the data only from the local server. If you need to access the data from any other computer then you have to set the proper security options.

For example, to permit access from the 192.168.1.0/24 network:

<tscreen><verb>
mysql> GRANT delete,insert,select,update ON GNUGK.* TO 'YourDesiredUsername'@'192.168.1.%' IDENTIFIED BY 'APassword';
mysql> flush privileges;
</verb></tscreen>

Then you can add the following settings into your gnugk.ini file to insert and update the history of the calls into your database. 

<tscreen><verb>
[Gatekeeper::Acct]
SQLAcct=optional;start,stop,update
FileAcct=sufficient;stop

[FileAcct]
DetailFile=Add your desire path here something like /var/log/cdr.log
StandardCDRFormat=0
CDRString=%g|%n|%d|%c|%s|%u|%{gkip}|%{CallId}|%{ConfId}|%{setup-time}|%{connect-time}|%{disconnect-time}|%{caller-ip}|%{caller-port}|%{callee-ip}|%{callee-port}|%{src-info}|%{dest-info}|%{Calling-Station-Id}|%{Called-Station-Id}|%{Dialed-Number}
Rotate=daily
RotateTime=23:59

[SQLAcct]
Driver=MySQL
Database=GNUGK
Username=YourDesiredUsername
Password=APassword
StartQuery= insert into CDR (gatekeeper_name, call_number, call_duration, disconnect_cause, acct_session_id, h323_id, gkip, CallId, ConfId, setup_time, connect_time, disconnect_time, caller_ip, caller_port, callee_ip, callee_port, src_info, dest_info, Calling_Station_Id, Called_Station_Id, Dialed_Number) values ('%g', '%n', %d, %c, '%s', '%u', '%{gkip}', '%{CallId}', '%{ConfId}', '%{setup-time}', '%{connect-time}', '%{disconnect-time}', '%{caller-ip}', '%{caller-port}', '%{callee-ip}', '%{callee-port}', '%{src-info}', '%{dest-info}', '%{Calling-Station-Id}', '%{Called-Station-Id}', '%{Dialed-Number}')

StartQueryAlt= insert into CDR (gatekeeper_name, call_number, call_duration, disconnect_cause, acct_session_id, h323_id, gkip, CallId, ConfID, setup_time, connect_time, disconnect_time, caller_ip, caller_port, callee_ip, callee_port, src_info, dest_info, Calling_Station_Id, Called_Station_Id, Dialed_Number) values ('%g', '%n', %d, %c, '%s', '%u', '%{gkip}', '%{CallId}', '%{ConfID}', '%{setup-time}', '%{connect-time}', '%{disconnect-time}', '%{caller-ip}', '%{caller-port}', '%{callee-ip}', '%{callee-port}', '%{src-info}', '%{dest-info}', '%{Calling-Station-Id}', '%{Called-Station-Id}', '%{Dialed-Number}')

UpdateQuery= update CDR set call_duration=%d where gatekeeper_name='%g' and acct_session_id='%s'

StopQuery= update CDR set connect_time='%{connect-time}', call_duration=%d, disconnect_cause=%c, disconnect_time='%{disconnect-time}' where gatekeeper_name='%g' and acct_session_id='%s'

StopQueryAlt= insert into CDR (gatekeeper_name, call_number, call_duration, disconnect_cause, acct_session_id, h323_id, gkip, CallId, ConfID, setup_time, connect_time, disconnect_time, caller_ip, caller_port, callee_ip, callee_port, src_info, dest_info, Calling_Station_Id, Called_Station_Id, Dialed_Number) values ('%g STOP Alt', '%n', %d, %c, '%s', '%u', '%{gkip}', '%{CallId}', '%{ConfID}', '%{setup-time}', '%{connect-time}', '%{disconnect-time}', '%{caller-ip}', '%{caller-port}', '%{callee-ip}', '%{callee-port}', '%{src-info}', '%{dest-info}', '%{Calling-Station-Id}', '%{Called-Station-Id}', '%{Dialed-Number}')

TimestampFormat=MySQL
</verb></tscreen>


<sect1>Section &lsqb;StatusAcct&rsqb;
<label id="statusacct">
<p>
This accounting module sends all accounting information to the
status port where it can be used to interface to
external systems in real time.

You can use the <ref id="cdrparameters" name="common CDR parameters"> to define
what to include into your event strings.

<itemize>
<item><tt/StartEvent=CALL|Start|%{CallId}/<newline>
Default: <tt>CALL|Start|%{caller-ip}:%{caller-port}|%{callee-ip}:%{callee-port}|%{CallId}</tt><newline>
<p>
Defines the event to display for a new call. The string is parametrized
with the same variables as the other accounting modules (See <ref id="sqlacct" name="[SQLAcct]">).

<item><tt/StopEvent=CALL|Stop|%{CallId}/<newline>
Default: <tt>CALL|Stop|%{caller-ip}:%{caller-port}|%{callee-ip}:%{callee-port}|%{CallId}</tt><newline>
<p>
Defines the event when a call is finished (disconnected). The syntax and parameters are the same as for <tt/StartEvent/. This event is equivalent to the old status port CDR event, but more flexible.

<item><tt/UpdateEvent=CALL|Update|%{CallId}/<newline>
Default: <tt>CALL|Update|%{caller-ip}:%{caller-port}|%{callee-ip}:%{callee-port}|%{CallId}</tt><newline>
<p>
Defines event used to update the current call state. The syntax and parameters are the same as for <tt/StartEvent/.

<item><tt/AlertEvent=CALL|Alert|%{CallId}/<newline>
Default: <tt>CALL|Alert|%{caller-ip}:%{caller-port}|%{callee-ip}:%{callee-port}|%{CallId}</tt><newline>
<p>
Defines the event when a call is alerting. The syntax and parameters are the same as for <tt/StartEvent/.

<item><tt/ConnectEvent=CALL|Connect|%{CallId}/<newline>
Default: <tt>CALL|Connect|%{caller-ip}:%{caller-port}|%{callee-ip}:%{callee-port}|%{CallId}</tt><newline>
<p>
Defines the event when a call is connected. The syntax and parameters are the same as for <tt/StartEvent/.

<item><tt/RejectEvent=CALL|Reject|%{CallId}/<newline>
Default: <tt>CALL|Reject|%{caller-ip}:%{caller-port}|%{callee-ip}:%{callee-port}|%{CallId}</tt><newline>
<p>
Defines the event when a call is rejected. The syntax and parameters are the same as for <tt/StartEvent/.

<item><tt/MediaFailEvent=CALL|MediaFail|%{CallId}/<newline>
Default: <tt>CALL|MediaFail|%{caller-ip}:%{caller-port}|%{callee-ip}:%{callee-port}|%{CallId}</tt><newline>
<p>
Defines the message for the MediaFail event. The syntax and parameters are the same as for <tt/StartEvent/.

<item><tt/RegisterEvent=EP|Register|%{endpoint-ip}/<newline>
Default: <tt>EP|Register|%{endpoint-ip}:%{endpoint-port}|%{aliases}</tt><newline>
<p>
Defines the event when an endpoint registers. The syntax and parameters are the same as for <tt/StartEvent/.

<item><tt/UnregisterEvent=EP|Unregister|%{endpoint-ip}/<newline>
Default: <tt>EP|Unregister|%{endpoint-ip}:%{endpoint-port}|%{aliases}</tt><newline>
<p>
Defines the event when an endpoint registers. The syntax and parameters are the same as for <tt/StartEvent/.

<item><tt/TimestampFormat=MySQL/<newline>
Default: <tt>N/A</tt><newline>
<p>
Format of timestamp strings used in events. If this setting
is not specified, the global one from the main gatekeeper section is used.

</itemize>


<sect1>Section &lsqb;SyslogAcct&rsqb;
<label id="syslogacct">
<p>
This accounting module sends accounting information to the
Unix syslog and is not available on Windows. The local syslog daemon will then route the messages according to its configuration, generally specified in /etc/syslog.conf.

You can use the <ref id="cdrparameters" name="common CDR parameters"> to define
what to include into your event strings.

<itemize>
<item><tt/SyslogFacility=LOG_LOCAL1/<newline>
Default: <tt>LOG_USER</tt><newline>
<p>
Set the syslog facility to one of LOG_USER, LOG_DAEMON, LOG_AUTH, LOG_LOCAL0, LOG_LOCAL1, LOG_LOCAL2, LOG_LOCAL3, LOG_LOCAL4, LOG_LOCAL5, LOG_LOCAL6, LOG_LOCAL7.

<item><tt/SyslogLevel=LOG_NOTICE/<newline>
Default: <tt>LOG_INFO</tt><newline>
<p>
Set the syslog level to LOG_EMERG, LOG_ALERT, LOG_CRIT, LOG_ERR, LOG_WARNING, LOG_NOTICE, LOG_INFO or LOG_DEBUG.

<item><tt/StartEvent=CALL|Start|%{CallId}/<newline>
Default: <tt>CALL|Start|%{caller-ip}:%{caller-port}|%{callee-ip}:%{callee-port}|%{CallId}</tt><newline>
<p>
Defines the event to display for a new call. The string is parametrized
with the same variables as the other accounting modules (See <ref id="sqlacct" name="[SQLAacct]">).

<item><tt/StopEvent=CALL|Stop|%{CallId}/<newline>
Default: <tt>CALL|Stop|%{caller-ip}:%{caller-port}|%{callee-ip}:%{callee-port}|%{CallId}</tt><newline>
<p>
Defines the event when a call is finished (disconnected). The syntax and parameters are the same as for <tt/StartEvent/. This event is equivalent to the old status port CDR event, but more flexible.

<item><tt/UpdateEvent=CALL|Update|%{CallId}/<newline>
Default: <tt>CALL|Update|%{caller-ip}:%{caller-port}|%{callee-ip}:%{callee-port}|%{CallId}</tt><newline>
<p>
Defines event used to update the current call state. The syntax and parameters are the same as for <tt/StartEvent/.

<item><tt/ConnectEvent=CALL|Connect|%{CallId}/<newline>
Default: <tt>CALL|Connect|%{caller-ip}:%{caller-port}|%{callee-ip}:%{callee-port}|%{CallId}</tt><newline>
<p>
Defines the event when a call is connected. The syntax and parameters are the same as for <tt/StartEvent/.

<item><tt/TimestampFormat=MySQL/<newline>
Default: <tt>N/A</tt><newline>
<p>
Format of timestamp strings used in events. If this setting
is not specified, the global one from the main gatekeeper section is used.

</itemize>

<sect1>Section &lsqb;LuaAcct&rsqb;
<label id="luaacct">
<p>
This accounting module runs a LUA script for each accounting event.

The <ref id="cdrparameters" name="common CDR parameters"> are available as LUA variables as <tt>param_g</tt> or
<tt>param_Called_Station_Id</tt>. The minus sign in parameter names is replaced by an underscore to construct
valid LUA variable names.

The name of the event currently being processed is available in the variable <tt>event</tt> and
a result ("OK", "Fail", "Next") can be stored in the <tt>result</tt> variable.

<itemize>
<item><tt/Script=<em>script</em>/<newline>
Default: <tt>N/A</tt>
<p>
LUA script to run for every event.

<item><tt/ScriptFile=<em>script</em>/<newline>
Default: <tt>N/A</tt>
<p>
LUA file to run for every event.

<item><tt/TimestampFormat=MySQL/<newline>
Default: <tt>N/A</tt><newline>
<p>
Format of timestamp strings. If this setting
is not specified, the global one from the main gatekeeper section is used.

</itemize>


<sect1>Section &lsqb;HttpAcct&rsqb;
<label id="httpacct">
<p>
This accounting module sends accounting information via HTTP.

You can use the <ref id="cdrparameters" name="common CDR parameters"> to define
what to include into your request URL or body.

<itemize>
<item><tt/Method=GET/<newline>
Default: <tt>N/A</tt>
<p>
HTTP method to use. Currently GET and POST are supported.
When you use, post, you can specify a docuemnt body with on eof the switches below.
In the body, \r and \n are replaced with carriage return and line feed characters.

<item><tt>ContentType=application/json</tt><newline>
Default: <tt>text/plain</tt><newline>
<p>
The content type header to send in POST requests.

<item><tt>Authorization=Token abcdef</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The authorization header to send in HTTP requests.

<item><tt/TimestampFormat=MySQL/<newline>
Default: <tt>N/A</tt><newline>
<p>
Format of timestamp strings. If this setting
is not specified, the global one from the main gatekeeper section is used.

<item><tt>StartURL=http://example.com/call-start</tt><newline>
Default: <tt>N/A</tt>
<p>
The URL to fetch for call start events. You can use the parameters specified below to parameterize the URL.

<item><tt/StartBody=gatekeeper=%g/<newline>
Default: <tt>empty</tt>
<p>
The HTTP body for call start events to use with POST requests. You can use the parameters specified below to parameterize the URL.
if no body is specified for POSTs, the body will be constructed from the URL parameters, if present.

<item><tt>StopURL=http://example.com/call-stop</tt><newline>
Default: <tt>N/A</tt>
<p>
The URL to fetch for call stop events.

<item><tt/StopBody=gatekeeper=%g/<newline>
Default: <tt>empty</tt>
<p>
The HTTP body for call stop events to use with POST requests.

<item><tt>UpdateURL=http://example.com/call-update</tt><newline>
Default: <tt>N/A</tt>
<p>
The URL to fetch for call update events.

<item><tt/UpdateBody=gatekeeper=%g/<newline>
Default: <tt>empty</tt>
<p>
The HTTP body for call update events to use with POST requests.

<item><tt>AlertURL=http://example.com/call-alert</tt><newline>
Default: <tt>N/A</tt>
<p>
The URL to fetch for call alert events.

<item><tt/AlertBody=gatekeeper=%g/<newline>
Default: <tt>empty</tt>
<p>
The HTTP body for call alert events to use with POST requests.

<item><tt>ConnectURL=http://example.com/call-connect</tt><newline>
Default: <tt>N/A</tt>
<p>
The URL to fetch for call connect events.

<item><tt/ConnectBody=gatekeeper=%g/<newline>
Default: <tt>empty</tt>
<p>
The HTTP body for call connect events to use with POST requests.

<item><tt>RejectURL=http://example.com/call-rejected</tt><newline>
Default: <tt>N/A</tt>
<p>
The URL to fetch for call reject events.

<item><tt/RejectBody=gatekeeper=%g/<newline>
Default: <tt>empty</tt>
<p>
The HTTP body for call reject events to use with POST requests.

<item><tt>MediaFailURL=http://example.com/media-fail</tt><newline>
Default: <tt>N/A</tt>
<p>
The URL to fetch for MediaFail events.

<item><tt/MediaFailBody=gatekeeper=%g/<newline>
Default: <tt>empty</tt>
<p>
The HTTP body for MediaFail events to use with POST requests.

<item><tt>RegisterURL=http://example.com/ep-register</tt><newline>
Default: <tt>N/A</tt>
<p>
The URL to fetch for endpoint registration events.

<item><tt/RegisterBody=gatekeeper=%g/<newline>
Default: <tt>empty</tt>
<p>
The HTTP body for endpoint registration events to use with POST requests.

<item><tt>UnregisterURL=http://example.com/ep-unregister</tt><newline>
Default: <tt>N/A</tt>
<p>
The URL to fetch for endpoint unregistration events.

<item><tt/UnregisterBody=gatekeeper=%g/<newline>
Default: <tt>empty</tt>
<p>
The HTTP body for endpoint unregistration events to use with POST requests.

<item><tt>OnURL=http://example.com/gatekeeper-up</tt><newline>
Default: <tt>N/A</tt>
<p>
The URL to fetch for gatekeeper start events.

<item><tt/OnBody=gatekeeper=%g/<newline>
Default: <tt>empty</tt>
<p>
The HTTP body for gatekeeper start events to use with POST requests.

<item><tt>OffURL=http://example.com/gatekeeper-down</tt><newline>
Default: <tt>N/A</tt>
<p>
The URL to fetch for gatekeeper ststop events.

<item><tt/OffBody=gatekeeper=%g/<newline>
Default: <tt>empty</tt>
<p>
The HTTP body for gatekeeper stop events to use with POST requests.

</itemize>


<sect1>Section &lsqb;AMQPAcct&rsqb;
<label id="amqpacct">
<p>
This accounting module sends accounting information to AMQP queues, eg, RabbitMQ.

You can use the <ref id="cdrparameters" name="common CDR parameters"> to define
what to include into your request URL or body.

<itemize>

<item><tt/Host=192.168.1.1/<newline>
Default: <tt>localhost</tt><newline>
<p>
Set the host where the message broker runs.

<item><tt/Port=5672/<newline>
Default: <tt>5672</tt><newline>
<p>
The port of the message broker.

<item><tt/User=admin/<newline>
Default: <tt>guest</tt><newline>
<p>
The user name.

<item><tt/Password=secret/<newline>
Default: <tt>guest</tt><newline>
<p>
The password.

<item><tt/UseSSL=1/<newline>
Default: <tt>0</tt><newline>
<p>
Use SSL for the AMQP connection.

<item><tt>CACert=/path/to/cert</tt><newline>
Default: <tt>n/a</tt><newline>
<p>
Path to certificate file.

<item><tt/Exchange=foo/<newline>
Default: <tt>N/A</tt><newline>
<p>
The exchange to use.

<item><tt/RoutingKey=bar/<newline>
Default: <tt>N/A</tt><newline>
<p>
The routing key for the message broker. If you don't specify a routing key in the configuration,
GnuGk will set "gnugk.call.status" or "gnugk.registration.status" as routing key.

<item><tt>VHost=/</tt><newline>
Default: <tt>/</tt><newline>
<p>
The virtual host.

<item><tt>ContentType=application/json</tt><newline>
Default: <tt>text/plain</tt><newline>
<p>
The content type header to send.

<item><tt>StartEvent=Start Call GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for call start events. You can use the standard account parameters.

<item><tt>StopEvent=End Call GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for call stop events. You can use the standard account parameters.

<item><tt>UpdateEvent=Update Call GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for call update events. You can use the standard account parameters.

<item><tt>AlertEvent=Alert Call GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for call alert events. You can use the standard account parameters.

<item><tt>ConnectEvent=Connect Call GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for call conect events. You can use the standard account parameters.

<item><tt>RejectEvent=Reject Call GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for call reject events. You can use the standard account parameters.

<item><tt>RegisterEvent=Register Endpoint GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for endpoint registration events. You can use the standard account parameters.

<item><tt>UnregisterEvent=Unregister Endpoint GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for endpoint unregistration events. You can use the standard account parameters.

<item><tt>OnEvent=GK Start %g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for ON events. You can use the standard account parameters.

<item><tt>OffEvent=GK Stop %g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for OFF events. You can use the standard account parameters.

<item><tt/TimestampFormat=MySQL/<newline>
Default: <tt>N/A</tt><newline>
<p>
Format of timestamp strings. If this setting
is not specified, the global one from the main gatekeeper section is used.

</itemize>

In the settings for Host, Port, User, Password, UseSSL, CACert, Exchange and RoutingKey you can use %{env1} to %{env9}
to insert the environment variables GNUGK_ENV1 ... GNUGK_ENV9.


<sect1>Section &lsqb;MQTTAcct&rsqb;
<label id="mqttacct">
<p>
This accounting module sends accounting information to an MQTT server.

You can use the <ref id="cdrparameters" name="common CDR parameters"> to define
what to include into your request URL or body.

<itemize>

<item><tt/Host=192.168.1.1/<newline>
Default: <tt>localhost</tt><newline>
<p>
Set the host where the message broker runs.

<item><tt/Port=1883/<newline>
Default: <tt>1883</tt><newline>
<p>
The port of the message broker.

<item><tt/UseSSL=0/<newline>
Default: <tt>0</tt><newline>
<p>
Currently not implemented.

<item><tt>CACert=/path/to/cert</tt><newline>
Default: <tt>n/a</tt><newline>
<p>
Currently not implemented.

<item><tt/User=admin/<newline>
Default: <tt>guest</tt><newline>
<p>
The user name.

<item><tt/Password=secret/<newline>
Default: <tt>guest</tt><newline>
<p>
The password.

<item><tt>CallTopic=foo/bar</tt><newline>
Default: <tt>gnugk/call/status</tt><newline>
<p>
The topic for call related events.

<item><tt>RegistrationTopic=foo/bar</tt><newline>
Default: <tt>gnugk/registration/status</tt><newline>
<p>
The topic for registration related events.

<item><tt>StartEvent=Start Call GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for call start events. You can use the standard account parameters.

<item><tt>StopEvent=End Call GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for call stop events. You can use the standard account parameters.

<item><tt>UpdateEvent=Update Call GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for call update events. You can use the standard account parameters.

<item><tt>AlertEvent=Alert Call GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for call alert events. You can use the standard account parameters.

<item><tt>ConnectEvent=Connect Call GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for call conect events. You can use the standard account parameters.

<item><tt>RejectEvent=Reject Call GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for call reject events. You can use the standard account parameters.

<item><tt>RegisterEvent=Register Endpoint GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for endpoint registration events. You can use the standard account parameters.

<item><tt>UnregisterEvent=Unregister Endpoint GK=%g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for endpoint unregistration events. You can use the standard account parameters.

<item><tt>OnEvent=GK Start %g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for ON events. You can use the standard account parameters.

<item><tt>OffEvent=GK Stop %g</tt><newline>
Default: <tt>N/A</tt><newline>
<p>
The text for OFF events. You can use the standard account parameters.

<item><tt/TimestampFormat=MySQL/<newline>
Default: <tt>N/A</tt><newline>
<p>
Format of timestamp strings. If this setting
is not specified, the global one from the main gatekeeper section is used.

</itemize>

In the settings for Host, Port, User, Password, UseSSL and CACert you can use %{env1} to %{env9}
to insert the environment variables GNUGK_ENV1 ... GNUGK_ENV9.


<sect1>Section &lsqb;RequireOneNet&rsqb;
<label id="requireonenet">
<p>
While this is technically an accounting module, its logical purpose is to authenticate calls
and make sure at least one end of the call is inside one of your own networks.
This is designed to protect traversal gatekeepers from abuse that by nature
need to be accessible for everybody who wants to call into your network,
but that should not be allowed to support external to external calls.

<itemize>
<item><tt>Networks=192.168.1.0/24,192.0.2.0/24</tt><newline>
Default: <tt>N/A</tt>
<p>
List the networks your gatekeeper supports. Either the source or the destination of
all calls must be within one of these networks.

</itemize>

